<!DOCTYPE html>
<html>
<head>
<title>Secure WebSocket Login</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js" integrity="sha512-a+SUDuwNzXDvz4XrIcXHuCf089/iJAoN4lmrXJg18XnduKK6YlDHNRalv4yd1N40OKI80tFidF+rqTFKGPoWFQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/3.3.2/jsencrypt.min.js" integrity="sha512-94ncgEEqkuZ4yNTFmu2dSn1TJ6Ij+ANQqpR7eLVU99kzvYzu6UjBxuVoNHtnd29R+T6nvK+ugCVI698pbyEkvQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
  <button id="login">Login</button>
  <script>
    const loginButton = document.getElementById('login');
    loginButton.addEventListener('click', () => {
alert("clicked");      
fetch('/', { method: 'POST' })
        .then(() => {
          // Start WebSocket communication after successful login
          const ws = new WebSocket('ws://localhost:8080');

          // Initialize CryptoJS (replace with your CryptoJS library inclusion)
//          const CryptoJS = require('crypto-js');

          // Generate DH key pair and get client public key
//          const dh = CryptoJS.algo.DH.generate(2048);
  //        const publicKey = dh.getPublicKey();

//const JSEncrypt = require('jsencrypt');
      const encryptor = new JSEncrypt();
//      const CryptoJS = require('crypto-js');

      // Generate DH key pair and get client public key
      const dh = encryptor.generateKeypair('DH', 2048);
      const publicKey = dh.publicKey;


          // Handle WebSocket messages
          ws.onmessage = (event) => {
            // Receive server's public key
            const serverPublicKey = event.data;

            // Send client's DH public key
            ws.send(publicKey);

            ws.onmessage = (event) => {
              // Receive server's signed DH public key and IV
              const signature = event.data.slice(-128);
              const serverPublicKeyData = event.data.slice(0, -128 - 16);
              iv = event.data.slice(-16);

              // Verify signature using CryptoJS
              const verified = CryptoJS.algo.RSA.verify(
                CryptoJS.enc.Base64.parse(publicKey),
                CryptoJS.enc.Base64.parse(signature),
                CryptoJS.enc.Hex.parse(serverPublicKeyData)
              );
              if (!verified) {
                throw new Error('Server signature verification failed!');
              }

              // Calculate shared secret
              const sharedSecret = CryptoJS.algo.DH.computeSecret(
                dh,
                CryptoJS.enc.Hex.parse(serverPublicKeyData)
              ).toString();

              // Derive encryption and authentication keys using HKDF
              const encryptionKey = CryptoJS.PBKDF2(
                sharedSecret,
                CryptoJS.enc.Hex.parse(CryptoJS.lib.WordArray.random(32).toString()),
                { keySize: 256 / 32, iterations: 10000, hasher: CryptoJS.algo.SHA256 }
              ).toString();
              const authenticationKey = CryptoJS.PBKDF2(
                sharedSecret,
                CryptoJS.enc.Hex.parse(CryptoJS.lib.WordArray.random(32).toString()),
                { keySize: 256 / 32, iterations: 10000, hasher: CryptoJS.algo.SHA256 }
              ).toString();

              // Send an encrypted object after key exchange
              const obj = { name: 'custom', content: 'none' };
              const response = JSON.stringify(obj);

              const encrypted = CryptoJS.AES.encrypt(
                response,
                CryptoJS.enc.Hex.parse(encryptionKey),
                { iv: CryptoJS.enc.Hex.parse(iv) }
              ).toString();
              const mac = CryptoJS.HmacSHA256(encrypted, authenticationKey).toString();
              ws.send(CryptoJS.enc.Hex.parse(iv.concat(encrypted, mac)));

              ws.onmessage = (event) => {
                // Receive encrypted messages from server
                const iv = event.data.slice(0, 16);
                const encryptedMessage = event.data.slice(16, -64);
                const mac = event.data.slice(-64);

                // Verify integrity before decryption
                const hmac = CryptoJS.HmacSHA256(encryptedMessage, authenticationKey).toString();
                if (hmac === CryptoJS.enc.Hex.stringify(CryptoJS.enc.Hex.parse(mac))) {
                  const decrypted = CryptoJS.AES.decrypt(
                    encryptedMessage,
                    CryptoJS.enc.Hex.parse(encryptionKey),
                    { iv: CryptoJS.enc.Hex.parse(iv) }
                  ).toString(CryptoJS.enc.Utf8);
                  console.log('Received message from server:', decrypted);
                } else {
                  console.error('Message authentication failed!');
                }
              };
            };
          };
        });
});        
</script>
</body>
</html>
